// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_candidates
std::vector< std::vector<int> > find_candidates(const IntegerMatrix& features, const IntegerVector& upper, const IntegerVector& lower, const LogicalVector& as_abs);
RcppExport SEXP _mc3logit_find_candidates(SEXP featuresSEXP, SEXP upperSEXP, SEXP lowerSEXP, SEXP as_absSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type as_abs(as_absSEXP);
    rcpp_result_gen = Rcpp::wrap(find_candidates(features, upper, lower, as_abs));
    return rcpp_result_gen;
END_RCPP
}
// permute
std::vector< unsigned int > permute(const std::vector< std::vector< unsigned int > >& candidates);
RcppExport SEXP _mc3logit_permute(SEXP candidatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector< std::vector< unsigned int > >& >::type candidates(candidatesSEXP);
    rcpp_result_gen = Rcpp::wrap(permute(candidates));
    return rcpp_result_gen;
END_RCPP
}
// sim_events
std::vector< std::vector< double > > sim_events(int nevents, int nofficers, int min_per_event, int max_per_event, int min_year, int max_year, int min_rate, int max_rate, double par_officer_female, double par_officer_years, double par_exposure_event, double par_exposure_prev, double par_event_violence, double par_officer_fe, int nsims, int seed);
RcppExport SEXP _mc3logit_sim_events(SEXP neventsSEXP, SEXP nofficersSEXP, SEXP min_per_eventSEXP, SEXP max_per_eventSEXP, SEXP min_yearSEXP, SEXP max_yearSEXP, SEXP min_rateSEXP, SEXP max_rateSEXP, SEXP par_officer_femaleSEXP, SEXP par_officer_yearsSEXP, SEXP par_exposure_eventSEXP, SEXP par_exposure_prevSEXP, SEXP par_event_violenceSEXP, SEXP par_officer_feSEXP, SEXP nsimsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type nevents(neventsSEXP);
    Rcpp::traits::input_parameter< int >::type nofficers(nofficersSEXP);
    Rcpp::traits::input_parameter< int >::type min_per_event(min_per_eventSEXP);
    Rcpp::traits::input_parameter< int >::type max_per_event(max_per_eventSEXP);
    Rcpp::traits::input_parameter< int >::type min_year(min_yearSEXP);
    Rcpp::traits::input_parameter< int >::type max_year(max_yearSEXP);
    Rcpp::traits::input_parameter< int >::type min_rate(min_rateSEXP);
    Rcpp::traits::input_parameter< int >::type max_rate(max_rateSEXP);
    Rcpp::traits::input_parameter< double >::type par_officer_female(par_officer_femaleSEXP);
    Rcpp::traits::input_parameter< double >::type par_officer_years(par_officer_yearsSEXP);
    Rcpp::traits::input_parameter< double >::type par_exposure_event(par_exposure_eventSEXP);
    Rcpp::traits::input_parameter< double >::type par_exposure_prev(par_exposure_prevSEXP);
    Rcpp::traits::input_parameter< double >::type par_event_violence(par_event_violenceSEXP);
    Rcpp::traits::input_parameter< double >::type par_officer_fe(par_officer_feSEXP);
    Rcpp::traits::input_parameter< int >::type nsims(nsimsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_events(nevents, nofficers, min_per_event, max_per_event, min_year, max_year, min_rate, max_rate, par_officer_female, par_officer_years, par_exposure_event, par_exposure_prev, par_event_violence, par_officer_fe, nsims, seed));
    return rcpp_result_gen;
END_RCPP
}
// sim_events2
std::vector<std::vector<double>> sim_events2(std::vector< int > event_id, std::vector< int > officer_id, std::vector< bool > officer_female, std::vector< double > officer_rate, std::vector< double > officer_fe, std::vector< int > officer_years, double par_officer_female, double par_officer_years, double par_exposure_event, double par_exposure_prev, double par_event_violence, double par_officer_fe, int nsims, int seed);
RcppExport SEXP _mc3logit_sim_events2(SEXP event_idSEXP, SEXP officer_idSEXP, SEXP officer_femaleSEXP, SEXP officer_rateSEXP, SEXP officer_feSEXP, SEXP officer_yearsSEXP, SEXP par_officer_femaleSEXP, SEXP par_officer_yearsSEXP, SEXP par_exposure_eventSEXP, SEXP par_exposure_prevSEXP, SEXP par_event_violenceSEXP, SEXP par_officer_feSEXP, SEXP nsimsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector< int > >::type event_id(event_idSEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type officer_id(officer_idSEXP);
    Rcpp::traits::input_parameter< std::vector< bool > >::type officer_female(officer_femaleSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type officer_rate(officer_rateSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type officer_fe(officer_feSEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type officer_years(officer_yearsSEXP);
    Rcpp::traits::input_parameter< double >::type par_officer_female(par_officer_femaleSEXP);
    Rcpp::traits::input_parameter< double >::type par_officer_years(par_officer_yearsSEXP);
    Rcpp::traits::input_parameter< double >::type par_exposure_event(par_exposure_eventSEXP);
    Rcpp::traits::input_parameter< double >::type par_exposure_prev(par_exposure_prevSEXP);
    Rcpp::traits::input_parameter< double >::type par_event_violence(par_event_violenceSEXP);
    Rcpp::traits::input_parameter< double >::type par_officer_fe(par_officer_feSEXP);
    Rcpp::traits::input_parameter< int >::type nsims(nsimsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_events2(event_id, officer_id, officer_female, officer_rate, officer_fe, officer_years, par_officer_female, par_officer_years, par_exposure_event, par_exposure_prev, par_event_violence, par_officer_fe, nsims, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mc3logit_find_candidates", (DL_FUNC) &_mc3logit_find_candidates, 4},
    {"_mc3logit_permute", (DL_FUNC) &_mc3logit_permute, 1},
    {"_mc3logit_sim_events", (DL_FUNC) &_mc3logit_sim_events, 16},
    {"_mc3logit_sim_events2", (DL_FUNC) &_mc3logit_sim_events2, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_mc3logit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
