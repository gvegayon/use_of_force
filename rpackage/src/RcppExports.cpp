// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// find_candidates
std::vector< std::vector<int> > find_candidates(const IntegerMatrix& features, const IntegerVector& upper, const IntegerVector& lower, const LogicalVector& as_abs);
RcppExport SEXP _njforce_find_candidates(SEXP featuresSEXP, SEXP upperSEXP, SEXP lowerSEXP, SEXP as_absSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type as_abs(as_absSEXP);
    rcpp_result_gen = Rcpp::wrap(find_candidates(features, upper, lower, as_abs));
    return rcpp_result_gen;
END_RCPP
}
// permute
std::vector< unsigned int > permute(const std::vector< std::vector< unsigned int > >& candidates);
RcppExport SEXP _njforce_permute(SEXP candidatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector< std::vector< unsigned int > >& >::type candidates(candidatesSEXP);
    rcpp_result_gen = Rcpp::wrap(permute(candidates));
    return rcpp_result_gen;
END_RCPP
}
// simulate_njforce
std::vector< std::vector< double > > simulate_njforce(int nevents, int nofficers, int min_per_event, int max_per_event, int min_year, int max_year, int min_rate, int max_rate, double female, double years, double rho, double exposure, int seed);
RcppExport SEXP _njforce_simulate_njforce(SEXP neventsSEXP, SEXP nofficersSEXP, SEXP min_per_eventSEXP, SEXP max_per_eventSEXP, SEXP min_yearSEXP, SEXP max_yearSEXP, SEXP min_rateSEXP, SEXP max_rateSEXP, SEXP femaleSEXP, SEXP yearsSEXP, SEXP rhoSEXP, SEXP exposureSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nevents(neventsSEXP);
    Rcpp::traits::input_parameter< int >::type nofficers(nofficersSEXP);
    Rcpp::traits::input_parameter< int >::type min_per_event(min_per_eventSEXP);
    Rcpp::traits::input_parameter< int >::type max_per_event(max_per_eventSEXP);
    Rcpp::traits::input_parameter< int >::type min_year(min_yearSEXP);
    Rcpp::traits::input_parameter< int >::type max_year(max_yearSEXP);
    Rcpp::traits::input_parameter< int >::type min_rate(min_rateSEXP);
    Rcpp::traits::input_parameter< int >::type max_rate(max_rateSEXP);
    Rcpp::traits::input_parameter< double >::type female(femaleSEXP);
    Rcpp::traits::input_parameter< double >::type years(yearsSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type exposure(exposureSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_njforce(nevents, nofficers, min_per_event, max_per_event, min_year, max_year, min_rate, max_rate, female, years, rho, exposure, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_njforce_find_candidates", (DL_FUNC) &_njforce_find_candidates, 4},
    {"_njforce_permute", (DL_FUNC) &_njforce_permute, 1},
    {"_njforce_simulate_njforce", (DL_FUNC) &_njforce_simulate_njforce, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_njforce(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
